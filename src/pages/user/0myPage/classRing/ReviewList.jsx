import React, { useState } from 'react';
import styles from './ReviewList.module.css';
import { FaStar, FaRegStar } from 'react-icons/fa';

export default function ReviewList() {
  const [activeTab, setActiveTab] = useState('writable');
  const [selectedDate, setSelectedDate] = useState('Ï†ÑÏ≤¥');
  const [currentPage, setCurrentPage] = useState(1);
  const [openReviewId, setOpenReviewId] = useState(null);
  const [ratings, setRatings] = useState({});

  const writableReviews = [
    { id: 1, classTitle: 'ÎèÑÏûêÍ∏∞ ÌÅ¥ÎûòÏä§', date: '25.06.22', user: 'USERNAME' },
    { id: 2, classTitle: 'Î≥¥Ïª¨ ÌÅ¥ÎûòÏä§', date: '25.06.21', user: 'USERNAME' },
  ];

  const doneReviews = [
    {
      id: 3,
      classTitle: 'Î≥¥Ïª¨ ÌÅ¥ÎûòÏä§',
      writeDate: '25.06.20',
      user: 'USERNAME',
      content: 'Ï†ïÎßê Ï¶êÍ±∞Ïõ†Ïñ¥Ïöî~ Í∞êÏÇ¨Ìï©ÎãàÎã§!',
      teacherReply: 'Ï∞∏Ïó¨Ìï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï¥Ïöî! Îòê ÎßåÎÇòÏöî ‚ò∫Ô∏è',
      rating: 4,
      replyDate: '25.06.21',
    },
    {
      id: 4,
      classTitle: 'Í≥µÏòà ÌÅ¥ÎûòÏä§',
      writeDate: '25.06.19',
      user: 'USERNAME',
      content: 'ÎßåÏ°±Ïä§Îü¨Ïõ†Ïñ¥Ïöî~',
      teacherReply: 'Ïπ≠Ï∞¨ Í∞êÏÇ¨Ìï©ÎãàÎã§ üíï',
      rating: 5,
      replyDate: '25.06.20',
    },
  ];

  const data = activeTab === 'writable' ? writableReviews : doneReviews;
  const dateKey = activeTab === 'writable' ? 'date' : 'writeDate';
  const filteredData =
    selectedDate === 'Ï†ÑÏ≤¥'
      ? data
      : data.filter((r) => r[dateKey] === selectedDate);

  const reviewsPerPage = 2;
  const totalPages = Math.ceil(filteredData.length / reviewsPerPage);
  const indexOfLast = currentPage * reviewsPerPage;
  const indexOfFirst = indexOfLast - reviewsPerPage;
  const currentReviews = filteredData.slice(indexOfFirst, indexOfLast);

  const toggleAccordion = (id) => {
    setOpenReviewId((prev) => (prev === id ? null : id));
  };

  const handleRating = (id, value) => {
    setRatings((prev) => ({ ...prev, [id]: value }));
  };

  return (
    <main className={styles.pageWrapper}>
      <aside className={styles.sidebar}>
        <div className={styles.sidebarBox}>ÌöåÏõêÏ†ïÎ≥¥</div>
        <div className={styles.sidebarBox}>ÎßàÏù¥Î©îÎâ¥</div>
      </aside>

      <section className={styles.section}>
        <h2 className={styles.title}>Î¶¨Î∑∞ ÎÇ¥Ïó≠</h2>

        <div className={styles.tabs}>
          <button
            className={`${styles.tabButton} ${activeTab === 'writable' ? styles.tabButtonActive : ''}`}
            onClick={() => {
              setActiveTab('writable');
              setSelectedDate('Ï†ÑÏ≤¥');
              setCurrentPage(1);
            }}
          >
            ÏûëÏÑ± Í∞ÄÎä•Ìïú Î¶¨Î∑∞
          </button>
          <button
            className={`${styles.tabButton} ${activeTab === 'done' ? styles.tabButtonActive : ''}`}
            onClick={() => {
              setActiveTab('done');
              setSelectedDate('Ï†ÑÏ≤¥');
              setCurrentPage(1);
            }}
          >
            ÏûëÏÑ± ÏôÑÎ£åÌïú Î¶¨Î∑∞
          </button>
        </div>

        <div className={styles.filterRow}>
          <label>ÎÇ†Ïßú ÌïÑÌÑ∞:</label>
          <select
            value={selectedDate}
            onChange={(e) => {
              setSelectedDate(e.target.value);
              setCurrentPage(1);
            }}
            className={styles.select}
          >
            <option value="Ï†ÑÏ≤¥">Ï†ÑÏ≤¥</option>
            {[...new Set(data.map((r) => r[dateKey]))].map((date) => (
              <option key={date} value={date}>
                {date}
              </option>
            ))}
          </select>
        </div>

        <div>
          {currentReviews.map((item) => (
            <div
              key={item.id}
              className={`${styles.reviewBox} ${activeTab === 'done' ? styles.reviewBoxDone : ''}`}
            >
              <div className={styles.accordionHeader} onClick={() => toggleAccordion(item.id)}>
                <p>
                  <strong>{item.classTitle}</strong> | ÏàòÍ∞ïÏùº: {item[dateKey]}
                </p>
                <span>{openReviewId === item.id ? '‚ñ≤' : '‚ñº'}</span>
              </div>

              {openReviewId === item.id && (
                <div className={styles.accordionBody}>
                  {activeTab === 'writable' ? (
                    <>
                      <textarea
                        placeholder="Ïù¥ ÌÅ¥ÎûòÏä§Îäî Ïñ¥Îï†ÎÇòÏöî? Î¶¨Î∑∞Î•º ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî üòä"
                        className={styles.textarea}
                      />
                      <div className={styles.starRating}>
                        {[1, 2, 3, 4, 5].map((num) => (
                          <span
                            key={num}
                            onClick={() => handleRating(item.id, num)}
                            className={styles.star}
                          >
                            {ratings[item.id] >= num ? <FaStar /> : <FaRegStar />}
                          </span>
                        ))}
                      </div>
                      <button className={styles.submitButton}>Îì±Î°ù</button>
                    </>
                  ) : (
                    <>
                      <div className={styles.starDisplay}>
                        {[...Array(5)].map((_, i) =>
                          i < item.rating ? (
                            <FaStar key={i} className={styles.star} />
                          ) : (
                            <FaRegStar key={i} className={styles.star} />
                          )
                        )}
                      </div>
                      <p className={styles.reviewContent}>{item.content}</p>
                      <div className={styles.teacherReply}>
                        <p>
                          <strong>Í∞ïÏÇ¨ÎãµÎ≥Ä</strong> ({item.replyDate})
                        </p>
                        <p>{item.teacherReply}</p>
                      </div>
                    </>
                  )}
                </div>
              )}
            </div>
          ))}

          <div className={styles.pagination}>
            {[...Array(totalPages)].map((_, idx) => (
              <button
                key={idx}
                className={`${styles.pageButton} ${
                  currentPage === idx + 1 ? styles.pageButtonActive : ''
                }`}
                onClick={() => setCurrentPage(idx + 1)}
              >
                {idx + 1}
              </button>
            ))}
          </div>
        </div>
      </section>
    </main>
  );
}
